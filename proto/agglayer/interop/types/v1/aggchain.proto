syntax = "proto3";

package agglayer.interop.types.v1;

import "agglayer/interop/types/v1/bytes.proto";

// Aggchaindata is the data sent by the aggchain.
message AggchainData {
  // The data of the aggchain.
  oneof data {
    // Legacy ECDSA signature on a commitment to the state transition.
    FixedBytes65 signature = 1;

    // Aggchain proof with the single ECDSA verified by the agglayer only.
    AggchainProof generic = 2;

    // Only multisig performed by the chain's committee.
    Multisig multisig = 3;

    // Multisig combined with an aggchain proof.
    AggchainProofWithMultisig multisig_and_aggchain_proof = 4;
  }
}

// Multisig
message Multisig {
  // Multisig scheme.
  oneof data {
    // ECDSA multisig scheme.
    ECDSAMultisig ecdsa = 1;
  }
}

// ECDSA multisig scheme with signatures from the committee members.
message ECDSAMultisig {
  // Represents the key-value pair of a committee member signature entry.
  message ECDSAMultisigEntry {
    // The key is the place of the signer in the list of multisig signer on L1.
    uint32 index = 1;
    // The value is the signature made by the commitee member.
    FixedBytes65 signature = 2;
  }
  // Signatures from the committee members.
  repeated ECDSAMultisigEntry signatures = 3;
}

// Multisig and aggchain proof
message AggchainProofWithMultisig {
  // Multisig
  Multisig multisig = 1;

  // AggchainProof
  AggchainProof aggchain_proof = 2;
}

// Aggchain proof.
message AggchainProof {
  // Aggchain params.
  FixedBytes32 aggchain_params = 1;

  // Important: The signature is ignored if the aggchain proof is part of a AggchainProofWithMultisig.
  // The signature linked to the aggchain-proof.
  // This signature is used to verify the authenticity of the aggchain-proof.
  // It represents a commitment to:
  // - `NewLocalExitRoot`
  // - `ClaimHash` (which is the hash of all the claims's global index + bridge exit hash)
  // - `Height` of the certificate associated to this aggchain-proof
  // - `AggchainParams` of the aggchain-proof
  FixedBytes65 signature = 2;

  // Aggchain proof context to share non-sensitive data.
  map<string, bytes> context = 3;
  // The proof for the aggchain.
  oneof proof {
    // SP1 stark proof.
    SP1StarkProof sp1_stark = 4;
  }
}

// SP1 stark proof.
message SP1StarkProof {
  // SP1 Version
  string version = 1;

  // SP1 stark proof.
  bytes proof = 2;

  // SP1 stark proof verification key.
  bytes vkey = 3;
}
