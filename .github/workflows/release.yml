name: Release

permissions:
  pull-requests: write
  contents: write

on:
  workflow_run:
    workflows:
      - "Test"
    types:
      - completed
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump level"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  release-crates:
    name: Release crates
    runs-on: ubuntu-latest
    if: github.repository_owner == 'agglayer' && github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Switch
        run: git switch -c release-${{ github.run_id }} || git switch release-${{ github.run_id }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  automated-release-pr:
    name: Automated Release PR
    runs-on: ubuntu-latest
    if: github.repository_owner == 'agglayer' && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: automated-release-pr-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-make
        run: cargo install cargo-make

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Install cargo-semver-checks
        run: cargo install cargo-semver-checks --locked

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -1 | awk -F'"' '{print $2}')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version and check for breaking changes
        id: version_bump
        run: |
          set -e

          # Manual version bump if specified via workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.version_bump }}" != "auto" ]; then
            echo "Manual version bump specified: ${{ github.event.inputs.version_bump }}"

            # Bump versions based on manual input
            case "${{ github.event.inputs.version_bump }}" in
              major)
                cargo set-version --bump major
                BUMP_TYPE="major"
                ;;
              minor)
                cargo set-version --bump minor
                BUMP_TYPE="minor"
                ;;
              patch)
                cargo set-version --bump patch
                BUMP_TYPE="patch"
                ;;
            esac

            NEW_VERSION=$(grep '^version' Cargo.toml | head -1 | awk -F'"' '{print $2}')
            echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Final version: $NEW_VERSION"
          else
            # Automatic version bump with semver-checks
            echo "Starting with minor version bump"
            cargo set-version --bump minor

            # Get the new version after minor bump
            NEW_VERSION=$(grep '^version' Cargo.toml | head -1 | awk -F'"' '{print $2}')
            echo "After minor bump: $NEW_VERSION"

            # Check for breaking changes using semver-checks
            echo "Running cargo semver-checks to detect breaking changes..."
            if ! cargo semver-checks --baseline-version ${{ steps.current_version.outputs.current_version }}; then
              echo "Breaking changes detected! Bumping to major version"
              # Reset to original version and do major bump
              git checkout HEAD -- Cargo.toml
              cargo set-version --bump major
              NEW_VERSION=$(grep '^version' Cargo.toml | head -1 | awk -F'"' '{print $2}')
              echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "bump_type=major" >> $GITHUB_OUTPUT
            else
              echo "No breaking changes detected, keeping minor bump"
              echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            fi

            echo "Final version: $NEW_VERSION"
          fi

      - name: Generate changelogs
        run: |
          set -e
          echo "Generating changelogs with version ${{ steps.version_bump.outputs.final_version }}"
          cargo make changelog-version-all

      - name: Determine branch strategy
        id: branch_strategy
        run: |
          MAJOR_MINOR=$(echo "${{ steps.version_bump.outputs.final_version }}" | cut -d. -f1-2)
          FULL_VERSION="${{ steps.version_bump.outputs.final_version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          # Use chore/prepare-release-vX.X.X format for all automated PR branches
          BRANCH_NAME="chore/prepare-release-v$FULL_VERSION"

          if [ "$BUMP_TYPE" = "patch" ]; then
            BASE_BRANCH="release/v$MAJOR_MINOR"
            echo "Using patch PR branch: $BRANCH_NAME with base: $BASE_BRANCH"
          else
            BASE_BRANCH="main"
            echo "Using major/minor PR branch: $BRANCH_NAME with base: $BASE_BRANCH"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT

      - name: Create Release PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(release): prepare v${{ steps.version_bump.outputs.final_version }}

            Version bump type: ${{ steps.version_bump.outputs.bump_type }}
            Previous version: ${{ steps.current_version.outputs.current_version }}
            New version: ${{ steps.version_bump.outputs.final_version }}
          title: "chore(release): prepare v${{ steps.version_bump.outputs.final_version }}"
          signoff: true
          sign-commits: true
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          body: |
            ## Release v${{ steps.version_bump.outputs.final_version }}

            **Version bump type:** ${{ steps.version_bump.outputs.bump_type }}
            **Previous version:** ${{ steps.current_version.outputs.current_version }}
            **New version:** ${{ steps.version_bump.outputs.final_version }}

            ## Next Steps ðŸ“‹

            ### For Codeowners
            1. **Review** this PR to ensure version bump and changelog updates are correct
            2. **Verify** that all breaking changes (if any) are properly documented
            3. **Merge** this PR when ready to proceed with the release

          branch: ${{ steps.branch_strategy.outputs.branch_name }}
          base: ${{ steps.branch_strategy.outputs.base_branch }}
          delete-branch: false
          draft: false
          assignees: ${{ github.actor }}
          pull-request-commits-verified: true
          labels: |
            release
